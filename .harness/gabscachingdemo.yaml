pipeline:
  projectIdentifier: default_project
  orgIdentifier: default
  stages:
    - stage:
        name: Build
        identifier: Build
        type: CI
        spec:
          cloneCodebase: true
          execution:
            steps:
              - stepGroup:
                  name: Redis Background Group
                  identifier: Redis_Background_Group
                  steps:
                    - step:
                        type: Background
                        name: Redis Stack
                        identifier: redis
                        spec:
                          connectorRef: gabsdh
                          image: redis:7.2.4
                          shell: Sh
                          portBindings:
                            "6379": "6379"
                          imagePullPolicy: IfNotPresent
                    - step:
                        type: Run
                        name: Is Redis working
                        identifier: Is_Redis_working
                        spec:
                          shell: Bash
                          command: |-
                            #!/bin/bash
                            sudo apt-get update
                            sudo apt-get install redis-tools -y
                            which redis-cli

                            HOST=localhost
                            PORT=6379
                            RETRIES=5
                            DELAY=2

                            for ((i=0; i<RETRIES; i++)); do
                                if redis-cli -h $HOST -p $PORT ping | grep -q PONG; then
                                    echo "Redis is ready!"
                                    exit 0
                                else
                                    echo "Waiting for Redis to be ready..."
                                    sleep $DELAY
                                fi
                            done

                            echo "Redis is not ready after multiple attempts."
                            exit 1
              - parallel:
                  - step:
                      type: Run
                      name: Get Python App Version
                      identifier: Get_Python_App_Version
                      spec:
                        connectorRef: gabsdh
                        image: python:3.12.2-slim
                        shell: Bash
                        command: export PYTHON_APP_VERSION=$(python get_version.py)
                        privileged: true
                        outputVariables:
                          - name: PYTHON_APP_VERSION
                  - step:
                      type: Run
                      name: Generate Random Secret
                      identifier: Generate_Random_Secret
                      spec:
                        shell: Bash
                        command: export tempsecret=$(echo $RANDOM$RANDOM$RANDOM | cut -c 1-10)
                        outputVariables:
                          - name: tempsecret
              - stepGroup:
                  name: Scan for Vulnerabilities
                  identifier: Scan_for_Vulnerabilities
                  steps:
                    - parallel:
                        - step:
                            type: Bandit
                            name: Bandit
                            identifier: Bandit
                            spec:
                              mode: orchestration
                              config: default
                              target:
                                type: repository
                                name: gabs-redlock-demo
                                variant: <+pipeline.stages.Build.spec.execution.steps.Get_Python_App_Version.output.outputVariables.PYTHON_APP_VERSION>
                              advanced:
                                log:
                                  level: debug
                                fail_on_severity: none
                        - step:
                            type: Gitleaks
                            name: Gitleaks
                            identifier: Gitleaks
                            spec:
                              mode: orchestration
                              config: default
                              target:
                                type: repository
                                name: gabs-redlock-demo
                                variant: <+pipeline.stages.Build.spec.execution.steps.Get_Python_App_Version.output.outputVariables.PYTHON_APP_VERSION>
                              advanced:
                                log:
                                  level: debug
                                fail_on_severity: none
                  when:
                    stageStatus: Success
                    condition: <+codebase.build.type> == "PR"
              - stepGroup:
                  name: Testing the App
                  identifier: Testing_the_App
                  steps:
                    - step:
                        type: Run
                        name: Test Happy Path
                        identifier: Test_Happy_Path
                        spec:
                          shell: Sh
                          command: |
                            #!/bin/bash

                            # Set up environment variables
                            export REDIS_CONN_STR="redis://127.0.0.1:6379/0"
                            export REDIS_CSV_FILE_NAME="/tmp/gabs.csv"

                            exit 0

                            ## Define the data to be added
                            #DATA="HARNESS BUILD PIPELINE BY GABS - App Version: <+pipeline.variables.APP_VERSION> - Rand Secret for CI: <+pipeline.stages.Build.spec.execution.steps.Generate_Random_Secret.output.outputVariables.tempsecret>"
                            #
                            ## Prepare the environment
                            #echo "Setting up environment..."
                            #touch "$REDIS_CSV_FILE_NAME"
                            #python -m pip install -r requirements.txt
                            #
                            ## Execute the main script with the provided data
                            #echo "Running main script..."
                            #python main.py --data "$DATA"
                            #
                            ## Give some time for the file to be updated
                            #sleep 1
                            #
                            ## Check if the file contains the specific line
                            #echo "Validating the CSV file content..."
                            #if grep -qF -- "$DATA" "$REDIS_CSV_FILE_NAME"; then
                            #    echo "Validation successful: Data found in $REDIS_CSV_FILE_NAME"
                            #else
                            #    echo "Validation failed: Data not found in $REDIS_CSV_FILE_NAME"
                            #    exit 1
                            #fi
                            #
                            ## Optionally, display the content of the CSV file
                            #echo "Displaying the content of $REDIS_CSV_FILE_NAME:"
                            #cat "$REDIS_CSV_FILE_NAME"
              - step:
                  type: BuildAndPushDockerRegistry
                  name: Build and Push Container
                  identifier: Build_and_Push_Container
                  spec:
                    connectorRef: gabsdh
                    repo: gacerioni/gabs-redis-caching-python-demo
                    tags:
                      - latest
                      - <+pipeline.stages.Build.spec.execution.steps.Get_Python_App_Version.output.outputVariables.PYTHON_APP_VERSION>
                  when:
                    stageStatus: Success
              - stepGroup:
                  name: Scan Image
                  identifier: Scan_Image
                  steps:
                    - step:
                        type: AquaTrivy
                        name: AquaTrivy
                        identifier: AquaTrivy
                        spec:
                          mode: orchestration
                          config: default
                          target:
                            type: container
                            name: gabs-redlock-demo
                            variant: <+pipeline.stages.Build.spec.execution.steps.Get_Python_App_Version.output.outputVariables.PYTHON_APP_VERSION>
                          advanced:
                            log:
                              level: debug
                            fail_on_severity: none
                          privileged: true
                          image:
                            type: docker_v2
                            name: gacerioni/gabs-redlock-demo
                            tag: <+pipeline.stages.Build.spec.execution.steps.Get_Python_App_Version.output.outputVariables.PYTHON_APP_VERSION>
                  when:
                    stageStatus: Success
                    condition: <+codebase.build.type> == "PR"
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          caching:
            enabled: true
            paths:
              - /usr/lib/python3
              - /usr/bin/redis-cli
            key: ""
        description: ""
    - stage:
        name: Deploy to k3s
        identifier: Deploy_to_k3s
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: gabsrediscachingpythondemo
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  artifacts:
                    primary:
                      primaryArtifactRef: <+input>
                      sources: <+input>
          environment:
            environmentRef: DEV
            deployToAll: false
            infrastructureDefinitions:
              - identifier: k3sgabsredis
          execution:
            steps:
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        when:
          pipelineStatus: Success
          condition: 1 == 0
  properties:
    ci:
      codebase:
        connectorRef: account.Github
        repoName: gacerioni/gabs-redis-caching-python-demo
        build: <+input>
  variables:
    - name: APP_VERSION
      type: String
      description: ""
      required: false
      value: <+pipeline.stages.Build.spec.execution.steps.Get_Python_App_Version.output.outputVariables.PYTHON_APP_VERSION>
  identifier: gabscachingdemo
  tags: {}
  name: gabs-caching-demo
