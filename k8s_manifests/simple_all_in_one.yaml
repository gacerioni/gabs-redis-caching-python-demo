apiVersion: v1
kind: Namespace
metadata:
  name: gabs-cache-demo
---
apiVersion: v1
kind: Secret
metadata:
  name: gabs-cache-secret
  namespace: gabs-cache-demo
type: Opaque
data:
  DATABASE_URL: cG9zdGdyZXNxbDovL3B5dGhvbmdhYnM6c2VjcmV0NDJANTIuMy41MS4yMTQvcHl0aG9uZ2Ficw==  # base64 encoded
  REDIS_URL: cmVkaXM6Ly9kZWZhdWx0OnNlY3JldDQyQHJlZGlzLTEyMTIxLmdhYnMtY2x1c3Rlci5yZWRpc2RlbW8uY29tOjEyMTIxLzA=  # base64 encoded
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gabs-cache-deployment
  namespace: gabs-cache-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gabs-cache
  template:
    metadata:
      labels:
        app: gabs-cache
    spec:
      tolerations:
      - key: "node.kubernetes.io/disk-pressure"
        operator: "Exists"
        effect: "NoSchedule"
      containers:
      - name: gabs-cache
        image: gacerioni/gabs-redis-caching-python-demo:0.0.1-gabs  # Replace with your actual image
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        envFrom:
        - secretRef:
            name: gabs-cache-secret
        resources:
          requests:
            cpu: "100m"  # 100 millicpu (0.1 CPU)
            memory: "100Mi"  # 100 MiB
          limits:
            cpu: "200m"  # 200 millicpu (0.2 CPU)
            memory: "200Mi"  # 200 MiB
---
apiVersion: v1
kind: Service
metadata:
  name: gabs-cache-service
  namespace: gabs-cache-demo
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 5000
    nodePort: 30080
  selector:
    app: gabs-cache
